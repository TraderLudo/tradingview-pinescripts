// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TraderLudo

//@version=5
indicator(title="Enigma @TraderLudo", overlay=true)

// ##########
// # INPUTS #
// ##########

// # Inputs for Weekday separator
var groupGlobalSettings   = "Global settings"
maxTimeframe              = input.int    (91, "Hide indicator above specified minutes", group=groupGlobalSettings)

var groupIndicators       = "Indicators"
showWeekdaySeparator      = input.bool   (true, "Show Weekday Separator", group=groupIndicators)
showSessions              = input.bool   (true, "Show Sessions", group=groupIndicators)
showOpens                 = input.bool   (true, "Show Opens", group=groupIndicators)
showLiquidity             = input.bool   (true, "Show Liquidity", group=groupIndicators)

// #########
// # UTILS #
// #########
drawVerticalLine(start, color, linestyle, lineWidth) => 
    line.new(x1=start, y1=low - ta.tr, x2=start, y2=high + ta.tr, xloc=xloc.bar_time, extend=extend.both, color=color, style=linestyle, width=lineWidth)

convertTxtToStyle(txt) =>
    style = txt == "solid (-)" ? line.style_solid : txt == "dotted (┈)" ? line.style_dotted : txt == "dashed (╌)" ? line.style_dashed : line.style_solid
    style

cleanOldDrawings(days, midnightOpenTime) =>
    removeBefore = midnightOpenTime - (days * 86400000)
    allLines = line.all
    allLabels = label.all
    if array.size(allLines) > 0
	    for i = 0 to array.size(allLines) - 1
		    line_x2 = line.get_x2(array.get(allLines, i))
		    if line_x2 < removeBefore
		        line.delete(array.get(allLines, i))

getWeeklyStartOffset() =>
    ms = 25200000 // 7h in ms
    if syminfo.type == "crypto"
        ms := 0
    ms

// # Sessions
timeInRange(res, sess) => time(res, sess, "America/New_York") != 0

openBarSess(sess) =>
    t = time('D', sess, "America/New_York")
    na(t[1]) and not na(t) or t[1] < t

isOpenSess(sess) =>
    not na(time(timeframe.period, sess, "America/New_York"))

getHighLowSess(sess) =>
    openBar = openBarSess(sess)
    isOpen = isOpenSess(sess)
    sessLow = float(na)
    sessLow := isOpen ? openBar ? low : math.min(sessLow[1], low) : sessLow[1]
    sessHigh = float(na)
    sessHigh := isOpen ? openBar ? high : math.max(sessHigh[1], high) : sessHigh[1]
    array.from(sessHigh, sessLow)

varip float[] liquidityPrices = array.new_float(0)
varip string[] liquidityTexts = array.new_string(0)

updateLiquidityArrays(price, txt) =>
    var found = false
    for i = 0 to (array.size(liquidityPrices) == 0 ? na : array.size(liquidityPrices) - 1)
        if price == array.get(liquidityPrices, i) // ALREADY EXISTS WE DON'T ADD IT
            if str.contains(array.get(liquidityTexts, i), txt) == false
                array.set(liquidityTexts, i, array.get(liquidityTexts, i) + " + " + txt)
            found := true
    if found == false
        array.push(liquidityPrices, price)
        array.push(liquidityTexts, txt)

// #############
// # CONSTANTS #
// #############
timeMidnight      = time("1", "0000-0001:1234567", "America/New_York")
midnightOpenTime  = timestamp("America/New_York", year, month, dayofmonth, 0, 0, 0)
londonOpenTime    = timestamp("America/New_York", year, month, dayofmonth, 1, 30, 0)
amTime            = timestamp("America/New_York", year, month, dayofmonth, 6, 00, 0)
amOpenTime        = timestamp("America/New_York", year, month, dayofmonth, 7, 30, 0)
pmTime            = timestamp("America/New_York", year, month, dayofmonth, 12, 00, 0)
pmOpenTime        = timestamp("America/New_York", year, month, dayofmonth, 13, 30, 0)
asianTime         = timestamp("America/New_York", year, month, dayofmonth, 18, 00, 0)

currentTime             = timestamp("America/New_York", year, month, dayofmonth, hour, minute, second)
currentTimePlusTwoHours = currentTime + 3600 * 2 * 1000
endOfDayTime            = timestamp("America/New_York", year, month, dayofmonth, 23, 59, 59)
lineEndTime             = math.min(endOfDayTime, currentTimePlusTwoHours)

// # Constants for Sessions
asianSessionColor  = color.new(color.yellow, 93)
londonSessionColor = color.new(color.aqua, 93)
amSessionColor     = color.new(color.red, 93)
pmSessionColor     = color.new(color.gray, 93)

ASIAN_HOURS  = '1800-0000:1234567'
LONDON_HOURS = '0200-0500:1234567'
AM_HOURS     = '0830-1200:1234567'
PM_HOURS     = '1330-1600:1234567'

// MACRO
macro0950 = timestamp("America/New_York", year, month, dayofmonth, 9, 50, 0)
macro1050 = timestamp("America/New_York", year, month, dayofmonth, 10, 50, 0)
macro1150 = timestamp("America/New_York", year, month, dayofmonth, 10, 50, 0)

// Silver bullet
silverBullet1000 = timestamp("America/New_York", year, month, dayofmonth, 10, 00, 0)

newDay            = ta.change(dayofweek)
newWeek           = ta.change(weekofyear)
newMonth          = ta.change(time("M"))

colorWhiteTransparent = color.new(color.white, 100)

// # Constants for Weekday separator
txtMonday         = "M O N D A Y"
txtMondayShort    = "M O N"
txtTuesday        = "T U E S D A Y"
txtTuesdayShort   = "T U E"
txtWednesday      = "W E D N E S D A Y"
txtWednesdayShort = "W E D"
txtThursday       = "T H U R S D A Y"
txtThursdayShort  = "T H U"
txtFriday         = "F R I D A Y"
txtFridayShort    = "F R I"

colorSeparators    = color.rgb(0,0,0,80)
txtStyleSeparators = "dashed (╌)"
positionDaysOfWeek = location.bottom
colorText          = color.rgb(0,0,0,50)

styleSeparators   = convertTxtToStyle(txtStyleSeparators)

hourToDisplayTxt  = syminfo.type == "futures" ? 11 : syminfo.type == "crypto" ? 17 : 12
isCurrentWeek     = year(timenow) == year(time) and weekofyear(timenow) == weekofyear(time)
isWeekBefore      = (year(timenow) == year(time) and weekofyear(timenow) == weekofyear(time) + 1) or (year(timenow) == year(time) + 1 and weekofyear(time) == 52 and weekofyear(timenow) == 1) or (year(timenow) == year(time) + 1 and weekofyear(time) == 53 and weekofyear(timenow) == 1)

//displaySeparators = showWeekdaySeparator and timeframe.multiplier <= maxTimeframe and timeframe.isintraday and newDay and dayofweek != dayofweek.sunday
displaySeparators = showWeekdaySeparator and timeframe.multiplier <= maxTimeframe and timeframe.isintraday and newDay and dayofweek != dayofweek.sunday and (isWeekBefore or isCurrentWeek)

displayDayTxt     = showWeekdaySeparator and timeframe.multiplier <= maxTimeframe and timeframe.isintraday and hour == hourToDisplayTxt and minute == 0

// # Constants for Opens
openWeekly  = request.security(syminfo.tickerid, "W", open, lookahead = barmerge.lookahead_on)
openMonthly = request.security(syminfo.tickerid, "M", open, lookahead = barmerge.lookahead_on)

openColor     = color.rgb(0,0,0,50)
openLine      = "dashed (╌)"
openLineStyle = convertTxtToStyle(openLine)

// # Constants for Liquidity
dh = request.security(syminfo.tickerid, "D", high[0], barmerge.gaps_off, barmerge.lookahead_on)
dl = request.security(syminfo.tickerid, "D", low[0], barmerge.gaps_off, barmerge.lookahead_on)
pdh = request.security(syminfo.tickerid, "D", high[1], barmerge.gaps_off, barmerge.lookahead_on)
pdl = request.security(syminfo.tickerid, "D", low[1], barmerge.gaps_off, barmerge.lookahead_on)

wh = request.security(syminfo.tickerid, "W", high[0], barmerge.gaps_off, barmerge.lookahead_on)
wl = request.security(syminfo.tickerid, "W", low[0], barmerge.gaps_off, barmerge.lookahead_on)
pwh = request.security(syminfo.tickerid, "W", high[1], barmerge.gaps_off, barmerge.lookahead_on)
pwl = request.security(syminfo.tickerid, "W", low[1], barmerge.gaps_off, barmerge.lookahead_on)

mh = request.security(syminfo.tickerid, "M", high[0], barmerge.gaps_off, barmerge.lookahead_on)
ml = request.security(syminfo.tickerid, "M", low[0], barmerge.gaps_off, barmerge.lookahead_on)
pmh = request.security(syminfo.tickerid, "M", high[1], barmerge.gaps_off, barmerge.lookahead_on)
pml = request.security(syminfo.tickerid, "M", low[1], barmerge.gaps_off, barmerge.lookahead_on)

displayPD  = timeframe.multiplier <= maxTimeframe and timeframe.isintraday
displayPW  = timeframe.multiplier <= maxTimeframe and timeframe.isintraday
displayPM  = timeframe.multiplier <= maxTimeframe and timeframe.isintraday

// #####################
// # WEEKDAY SEPARATOR #
// #####################
if displaySeparators
    drawVerticalLine(midnightOpenTime, colorSeparators, styleSeparators, 1)

// LONG DAY NAME
plotchar(displayDayTxt and dayofweek == dayofweek.monday and (isWeekBefore or isCurrentWeek), offset=0, char=" ", text=txtMonday, color=colorText, location=positionDaysOfWeek, textcolor=colorText, editable=false, display=display.all - display.status_line)
plotchar(displayDayTxt and dayofweek == dayofweek.tuesday and (isWeekBefore or isCurrentWeek), offset=0, char=" ", text=txtTuesday, color=colorText, location=positionDaysOfWeek, textcolor=colorText, editable=false, display=display.all - display.status_line)
plotchar(displayDayTxt and dayofweek == dayofweek.wednesday and (isWeekBefore or isCurrentWeek), offset=0, char=" ", text=txtWednesday, color=colorText, location=positionDaysOfWeek, textcolor=colorText, editable=false, display=display.all - display.status_line)
plotchar(displayDayTxt and dayofweek == dayofweek.thursday and (isWeekBefore or isCurrentWeek), offset=0, char=" ", text=txtThursday, color=colorText, location=positionDaysOfWeek, textcolor=colorText, editable=false, display=display.all - display.status_line)
plotchar(displayDayTxt and dayofweek == dayofweek.friday and (isWeekBefore or isCurrentWeek), offset=0, char=" ", text=txtFriday, color=colorText, location=positionDaysOfWeek, textcolor=colorText, editable=false, display=display.all - display.status_line)

var int dayCount = 0
if dayofweek == dayofweek.monday
    dayCount := 0
if dayofweek == dayofweek.tuesday
    dayCount := 1
if dayofweek == dayofweek.wednesday
    dayCount := 2
if dayofweek == dayofweek.thursday
    dayCount := 3
if dayofweek == dayofweek.friday
    dayCount := 4
if dayofweek == dayofweek.saturday
    dayCount := 5
if dayofweek == dayofweek.sunday
    dayCount := 6

// if showOnlyCurrentWeek
//     cleanOldDrawings(dayCount, midnightOpenTime)

// ############
// # SESSIONS #
// ############
sessionHLAsian = getHighLowSess(ASIAN_HOURS)
asianOpenRangeHigh = plot(timeInRange(timeframe.period, ASIAN_HOURS) and showSessions ? array.get(sessionHLAsian, 0) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
asianOpenRangeLow = plot(timeInRange(timeframe.period, ASIAN_HOURS) and showSessions ? array.get(sessionHLAsian, 1) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
fill(asianOpenRangeHigh, asianOpenRangeLow, color=showSessions ? asianSessionColor : na, editable=false)

sessionHLLondon = getHighLowSess(LONDON_HOURS)
londonOpenRangeHigh = plot(timeInRange(timeframe.period, LONDON_HOURS) and showSessions ? array.get(sessionHLLondon, 0) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
londonOpenRangeLow = plot(timeInRange(timeframe.period, LONDON_HOURS) and showSessions ? array.get(sessionHLLondon, 1) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
fill(londonOpenRangeHigh, londonOpenRangeLow, color=showSessions ? londonSessionColor : na, editable=false)

sessionAM = getHighLowSess(AM_HOURS)
amOpenRangeHigh = plot(timeInRange(timeframe.period, AM_HOURS) and showSessions ? array.get(sessionAM, 0) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
amOpenRangeLow = plot(timeInRange(timeframe.period, AM_HOURS) and showSessions ? array.get(sessionAM, 1) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
fill(amOpenRangeHigh, amOpenRangeLow, color=showSessions ? amSessionColor : na, editable=false)

sessionPM = getHighLowSess(PM_HOURS)
pmOpenRangeHigh = plot(timeInRange(timeframe.period, PM_HOURS) and showSessions ? array.get(sessionPM, 0) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
pmOpenRangeLow = plot(timeInRange(timeframe.period, PM_HOURS) and showSessions ? array.get(sessionPM, 1) : na, color=colorWhiteTransparent, style=plot.style_line, linewidth=0, show_last=5, editable=false, display=display.none)
fill(pmOpenRangeHigh, pmOpenRangeLow, color=showSessions ? pmSessionColor : na, editable=false)

// #############
// # LIQUIDITY #
// #############
if showLiquidity
    var line[] lines = array.new_line(0)
    var label[] labels = array.new_label(0)

    if array.size(lines) > 0
        for i = 0 to array.size(lines) - 1
            line.delete(array.get(lines, i))

    if array.size(labels) > 0
        for i = 0 to array.size(labels) - 1
            label.delete(array.get(labels, i))
    
    array.clear(lines)
    array.clear(labels)

    if (syminfo.type != "crypto" and dayofweek != dayofweek.sunday) or (syminfo.type == "crypto")
        array.clear(liquidityPrices)
        array.clear(liquidityTexts)
        
        if dh < pdh and displayPD
            updateLiquidityArrays(pdh, "PDH")

        if wh < pwh and displayPW
            updateLiquidityArrays(pwh, "PWH")
        if mh < pmh and displayPM
            updateLiquidityArrays(pmh, "PMH")

        if dl > pdl and displayPD
            updateLiquidityArrays(pdl, "PDL")
        if wl > pwl and displayPW
            updateLiquidityArrays(pwl, "PWL")
        if ml > pml and displayPM
            updateLiquidityArrays(pml, "PML")

        for i = 0 to (array.size(liquidityPrices) == 0 ? na : array.size(liquidityPrices) - 1)
            lines.push(line.new(x1=midnightOpenTime, y1=array.get(liquidityPrices, i), x2=lineEndTime, y2=array.get(liquidityPrices, i), xloc=xloc.bar_time, color=color.black, style=line.style_solid, width=1))
            labels.push(label.new(x=lineEndTime, y=array.get(liquidityPrices, i), xloc=xloc.bar_time, text=array.get(liquidityTexts, i), color=color.rgb(0,0,0,100), textcolor=color.rgb(0,0,0,50), style=label.style_label_left, size=size.normal))

// ########
// # OPEN #
// ########
// Daily
var openMidnight   = 0.0

// Weekly
var weeklyOpenTime = time
var monthlyOpenTime = time

if bool(timeMidnight)
    if not bool(timeMidnight[1])
        openMidnight  := open
    else
        openMidnight := math.max(open, openMidnight)

if bool(newWeek)
    weeklyOpenTime := time
if bool(newMonth)
    monthlyOpenTime := time

if showOpens
    var line[] lines = array.new_line(0)
    var label[] labels = array.new_label(0)

    if array.size(lines) > 0
        for i = 0 to array.size(lines) - 1
            line.delete(array.get(lines, i))

    if array.size(labels) > 0
        for i = 0 to array.size(labels) - 1
            label.delete(array.get(labels, i))
    
    array.clear(lines)
    array.clear(labels)

    if (syminfo.type != "crypto" and dayofweek != dayofweek.sunday) or (syminfo.type == "crypto")
        if syminfo.type != "crypto" and dayofweek == dayofweek.friday
            labels.push(label.new(x=lineEndTime, y=openMidnight, xloc=xloc.bar_time, text="00:00", color=color.rgb(0,0,0,100), textcolor=openColor, style=label.style_label_left, size=size.normal, tooltip="Midnight Opening Price " + str.tostring(openMidnight)))
            lines.push(line.new(x1=midnightOpenTime, y1=openMidnight, x2=lineEndTime, y2=openMidnight, xloc=xloc.bar_time, color=openColor, style=openLineStyle, width=1))

            labels.push(label.new(x=lineEndTime, y=openWeekly, xloc=xloc.bar_time, text="Weekly open", color=color.rgb(0,0,0,100), textcolor=openColor, style=label.style_label_left, size=size.normal, tooltip="Weekly Opening Price " + str.tostring(openWeekly)))
            lines.push(line.new(x1=weeklyOpenTime-getWeeklyStartOffset(), y1=openWeekly, x2=lineEndTime, y2=openWeekly, xloc=xloc.bar_time, color=openColor, style=openLineStyle, width=1))

            labels.push(label.new(x=lineEndTime, y=openMonthly, xloc=xloc.bar_time, text="Monthly open", color=color.rgb(0,0,0,100), textcolor=openColor, style=label.style_label_left, size=size.normal, tooltip="Monthly Opening Price " + str.tostring(openMonthly)))
            lines.push(line.new(x1=monthlyOpenTime, y1=openMonthly, x2=lineEndTime, y2=openMonthly, xloc=xloc.bar_time, color=openColor, style=openLineStyle, width=1))
        else
            labels.push(label.new(x=lineEndTime, y=openMidnight, xloc=xloc.bar_time, text="00:00", color=color.rgb(0,0,0,100), textcolor=openColor, style=label.style_label_left, size=size.normal, tooltip="Midnight Opening Price " + str.tostring(openMidnight)))
            lines.push(line.new(x1=midnightOpenTime, y1=openMidnight, x2=lineEndTime, y2=openMidnight, xloc=xloc.bar_time, color=openColor, style=openLineStyle, width=1))

            labels.push(label.new(x=lineEndTime, y=openWeekly, xloc=xloc.bar_time, text="Weekly open", color=color.rgb(0,0,0,100), textcolor=openColor, style=label.style_label_left, size=size.normal, tooltip="Weekly Opening Price " + str.tostring(openWeekly)))
            lines.push(line.new(x1=weeklyOpenTime-getWeeklyStartOffset(), y1=openWeekly, x2=lineEndTime, y2=openWeekly, xloc=xloc.bar_time, color=openColor, style=openLineStyle, width=1))

            labels.push(label.new(x=lineEndTime, y=openMonthly, xloc=xloc.bar_time, text="Monthly open", color=color.rgb(0,0,0,100), textcolor=openColor, style=label.style_label_left, size=size.normal, tooltip="Monthly Opening Price " + str.tostring(openMonthly)))
            lines.push(line.new(x1=monthlyOpenTime, y1=openMonthly, x2=lineEndTime, y2=openMonthly, xloc=xloc.bar_time, color=openColor, style=openLineStyle, width=1))
